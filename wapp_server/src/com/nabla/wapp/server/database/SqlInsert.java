/**
* Copyright 2012 nabla
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not
* use this file except in compliance with the License. You may obtain a copy of
* the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
* License for the specific language governing permissions and limitations under
* the License.
*
*/
package com.nabla.wapp.server.database;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import com.nabla.wapp.server.general.Assert;
import com.nabla.wapp.shared.database.IRecordField;
import com.nabla.wapp.shared.database.IRecordTable;

/**
 * @author nabla
 *
 */
public class SqlInsert<T> {

	private final Class<T>	recordClass;
	private final String	sql;

	public SqlInsert(final Class<T> recordClass) {
		Assert.argumentNotNull(recordClass);
		this.recordClass = recordClass;

		final IRecordTable table = recordClass.getAnnotation(IRecordTable.class);
		Assert.notNull(table);
		final StringBuilder buffer = new StringBuilder("INSERT INTO ");
		buffer.append(table.name());
		buffer.append(" (");
		int count = 0;
		for (Field field : recordClass.getFields()) {
			final IRecordField recordField = field.getAnnotation(IRecordField.class);
			if (recordField == null)
				continue;
			String name = recordField.name();
			if (name.isEmpty())
				name = field.getName();
			if (count > 0)
				buffer.append(',');
			buffer.append(name);


			++count;
		}
		Assert.state(count > 0);
		buffer.append(") VALUES(?");
		for (int i = 1; i < count; ++i)
			buffer.append(",?");
		buffer.append(");");
		sql = buffer.toString();
	}

	public PreparedStatement createStatement(final Connection conn, final T record, int autoGeneratedKeys) throws SQLException {
		Assert.argumentNotNull(conn);
		Assert.argumentNotNull(record);

		final PreparedStatement stmt = conn.prepareStatement(sql, autoGeneratedKeys);
		for (Field field : recordClass.getFields()) {
			if (field.getAnnotation(IRecordField.class) == null)
				continue;

		}
		return stmt;
	}

	public PreparedStatement createStatement(final Connection conn, final T record) throws SQLException {
		return createStatement(conn, record, Statement.NO_GENERATED_KEYS);
	}

}
